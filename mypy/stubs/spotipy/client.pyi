from typing import Optional
from _typeshed import Incomplete
from spotipy.exceptions import SpotifyException
from spotipy.oauth2 import SpotifyOAuth, SpotifyClientCredentials, SpotifyImplicitGrant

__all__ = ['Spotify', 'SpotifyException']

class Spotify:
    max_retries: int
    default_retry_codes: tuple[int]
    country_codes: list[str]
    prefix: str
    client_credentials_manager: SpotifyClientCredentials
    oauth_manager: SpotifyOAuth
    proxies: Incomplete
    requests_timeout: int
    status_forcelist: Incomplete
    backoff_factor: float
    retries: int
    status_retries: int
    language: Optional[str]
    def __init__(self, auth: str | None = None, requests_session: bool = True, client_credentials_manager: SpotifyClientCredentials | None = None, oauth_manager: SpotifyOAuth | None = None, auth_manager: SpotifyOAuth | SpotifyClientCredentials | SpotifyImplicitGrant | None = None, proxies: Incomplete | None = None, requests_timeout: int = 5, status_forcelist: Incomplete | None = None, retries=..., status_retries=..., backoff_factor: float = 0.3, language: Incomplete | None = None) -> None: ...
    def set_auth(self, auth: str) -> None: ...
    @property
    def auth_manager(self): ...
    @auth_manager.setter
    def auth_manager(self, auth_manager) -> None: ...
    def __del__(self) -> None: ...
    def next(self, result): ...
    def previous(self, result): ...
    def track(self, track_id, market: Incomplete | None = None): ...
    def tracks(self, tracks, market: Incomplete | None = None): ...
    def artist(self, artist_id): ...
    def artists(self, artists): ...
    def artist_albums(self, artist_id, album_type: Incomplete | None = None, country: Incomplete | None = None, limit: int = 20, offset: int = 0): ...
    def artist_top_tracks(self, artist_id, country: str = 'US'): ...
    def artist_related_artists(self, artist_id): ...
    def album(self, album_id, market: Incomplete | None = None): ...
    def album_tracks(self, album_id, limit: int = 50, offset: int = 0, market: Incomplete | None = None): ...
    def albums(self, albums, market: Incomplete | None = None): ...
    def show(self, show_id, market: Incomplete | None = None): ...
    def shows(self, shows, market: Incomplete | None = None): ...
    def show_episodes(self, show_id, limit: int = 50, offset: int = 0, market: Incomplete | None = None): ...
    def episode(self, episode_id, market: Incomplete | None = None): ...
    def episodes(self, episodes, market: Incomplete | None = None): ...
    def search(self, q, limit: int = 10, offset: int = 0, type: str = 'track', market: Incomplete | None = None): ...
    def search_markets(self, q, limit: int = 10, offset: int = 0, type: str = 'track', markets: Incomplete | None = None, total: Incomplete | None = None): ...
    def user(self, user): ...
    def current_user_playlists(self, limit: int = 50, offset: int = 0): ...
    def playlist(self, playlist_id, fields: Incomplete | None = None, market: Incomplete | None = None, additional_types=('track',)): ...
    def playlist_tracks(self, playlist_id, fields: Incomplete | None = None, limit: int = 100, offset: int = 0, market: Incomplete | None = None, additional_types=('track',)): ...
    def playlist_items(self, playlist_id, fields: Incomplete | None = None, limit: int = 100, offset: int = 0, market: Incomplete | None = None, additional_types=('track', 'episode')): ...
    def playlist_cover_image(self, playlist_id): ...
    def playlist_upload_cover_image(self, playlist_id, image_b64): ...
    def user_playlist(self, user, playlist_id: Incomplete | None = None, fields: Incomplete | None = None, market: Incomplete | None = None): ...
    def user_playlist_tracks(self, user: Incomplete | None = None, playlist_id: Incomplete | None = None, fields: Incomplete | None = None, limit: int = 100, offset: int = 0, market: Incomplete | None = None): ...
    def user_playlists(self, user, limit: int = 50, offset: int = 0): ...
    def user_playlist_create(self, user, name, public: bool = True, collaborative: bool = False, description: str = ''): ...
    def user_playlist_change_details(self, user, playlist_id, name: Incomplete | None = None, public: Incomplete | None = None, collaborative: Incomplete | None = None, description: Incomplete | None = None): ...
    def user_playlist_unfollow(self, user, playlist_id): ...
    def user_playlist_add_tracks(self, user, playlist_id, tracks, position: Incomplete | None = None): ...
    def user_playlist_add_episodes(self, user, playlist_id, episodes, position: Incomplete | None = None): ...
    def user_playlist_replace_tracks(self, user, playlist_id, tracks): ...
    def user_playlist_reorder_tracks(self, user, playlist_id, range_start, insert_before, range_length: int = 1, snapshot_id: Incomplete | None = None): ...
    def user_playlist_remove_all_occurrences_of_tracks(self, user, playlist_id, tracks, snapshot_id: Incomplete | None = None): ...
    def user_playlist_remove_specific_occurrences_of_tracks(self, user, playlist_id, tracks, snapshot_id: Incomplete | None = None): ...
    def user_playlist_follow_playlist(self, playlist_owner_id, playlist_id): ...
    def user_playlist_is_following(self, playlist_owner_id, playlist_id, user_ids): ...
    def playlist_change_details(self, playlist_id, name: Incomplete | None = None, public: Incomplete | None = None, collaborative: Incomplete | None = None, description: Incomplete | None = None): ...
    def current_user_unfollow_playlist(self, playlist_id): ...
    def playlist_add_items(self, playlist_id, items, position: Incomplete | None = None): ...
    def playlist_replace_items(self, playlist_id, items): ...
    def playlist_reorder_items(self, playlist_id, range_start, insert_before, range_length: int = 1, snapshot_id: Incomplete | None = None): ...
    def playlist_remove_all_occurrences_of_items(self, playlist_id, items, snapshot_id: Incomplete | None = None): ...
    def playlist_remove_specific_occurrences_of_items(self, playlist_id, items, snapshot_id: Incomplete | None = None): ...
    def current_user_follow_playlist(self, playlist_id): ...
    def playlist_is_following(self, playlist_id, user_ids): ...
    def me(self): ...
    def current_user(self): ...
    def current_user_playing_track(self): ...
    def current_user_saved_albums(self, limit: int = 20, offset: int = 0, market: Incomplete | None = None): ...
    def current_user_saved_albums_add(self, albums=[]): ...
    def current_user_saved_albums_delete(self, albums=[]): ...
    def current_user_saved_albums_contains(self, albums=[]): ...
    def current_user_saved_tracks(self, limit: int = 20, offset: int = 0, market: Incomplete | None = None): ...
    def current_user_saved_tracks_add(self, tracks: list[str] | None = None): ...
    def current_user_saved_tracks_delete(self, tracks: list[str] | None = None): ...
    def current_user_saved_tracks_contains(self, tracks: list[str] | None = None) -> list[bool]: ...
    def current_user_saved_episodes(self, limit: int = 20, offset: int = 0, market: Incomplete | None = None): ...
    def current_user_saved_episodes_add(self, episodes: Incomplete | None = None): ...
    def current_user_saved_episodes_delete(self, episodes: Incomplete | None = None): ...
    def current_user_saved_episodes_contains(self, episodes: Incomplete | None = None): ...
    def current_user_saved_shows(self, limit: int = 20, offset: int = 0, market: Incomplete | None = None): ...
    def current_user_saved_shows_add(self, shows=[]): ...
    def current_user_saved_shows_delete(self, shows=[]): ...
    def current_user_saved_shows_contains(self, shows=[]): ...
    def current_user_followed_artists(self, limit: int = 20, after: Incomplete | None = None): ...
    def current_user_following_artists(self, ids: Incomplete | None = None): ...
    def current_user_following_users(self, ids: Incomplete | None = None): ...
    def current_user_top_artists(self, limit: int = 20, offset: int = 0, time_range: str = 'medium_term'): ...
    def current_user_top_tracks(self, limit: int = 20, offset: int = 0, time_range: str = 'medium_term'): ...
    def current_user_recently_played(self, limit: int = 50, after: Incomplete | None = None, before: Incomplete | None = None): ...
    def user_follow_artists(self, ids=[]): ...
    def user_follow_users(self, ids=[]): ...
    def user_unfollow_artists(self, ids=[]): ...
    def user_unfollow_users(self, ids=[]): ...
    def featured_playlists(self, locale: Incomplete | None = None, country: Incomplete | None = None, timestamp: Incomplete | None = None, limit: int = 20, offset: int = 0): ...
    def new_releases(self, country: Incomplete | None = None, limit: int = 20, offset: int = 0): ...
    def category(self, category_id, country: Incomplete | None = None, locale: Incomplete | None = None): ...
    def categories(self, country: Incomplete | None = None, locale: Incomplete | None = None, limit: int = 20, offset: int = 0): ...
    def category_playlists(self, category_id: Incomplete | None = None, country: Incomplete | None = None, limit: int = 20, offset: int = 0): ...
    def recommendations(self, seed_artists: Incomplete | None = None, seed_genres: Incomplete | None = None, seed_tracks: Incomplete | None = None, limit: int = 20, country: Incomplete | None = None, **kwargs): ...
    def recommendation_genre_seeds(self): ...
    def audio_analysis(self, track_id): ...
    def audio_features(self, tracks=[]): ...
    def devices(self): ...
    def current_playback(self, market: Incomplete | None = None, additional_types: Incomplete | None = None): ...
    def currently_playing(self, market: Incomplete | None = None, additional_types: Incomplete | None = None): ...
    def transfer_playback(self, device_id, force_play: bool = True): ...
    def start_playback(self, device_id: Incomplete | None = None, context_uri: Incomplete | None = None, uris: Incomplete | None = None, offset: Incomplete | None = None, position_ms: Incomplete | None = None): ...
    def pause_playback(self, device_id: Incomplete | None = None): ...
    def next_track(self, device_id: Incomplete | None = None): ...
    def previous_track(self, device_id: Incomplete | None = None): ...
    def seek_track(self, position_ms, device_id: Incomplete | None = None): ...
    def repeat(self, state, device_id: Incomplete | None = None) -> None: ...
    def volume(self, volume_percent, device_id: Incomplete | None = None) -> None: ...
    def shuffle(self, state, device_id: Incomplete | None = None) -> None: ...
    def queue(self): ...
    def add_to_queue(self, uri, device_id: Incomplete | None = None): ...
    def available_markets(self): ...
