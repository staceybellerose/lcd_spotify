from _typeshed import Incomplete

__all__ = ['CacheHandler', 'CacheFileHandler', 'DjangoSessionCacheHandler', 'FlaskSessionCacheHandler', 'MemoryCacheHandler', 'RedisCacheHandler']

class CacheHandler:
    def get_cached_token(self) -> None: ...
    def save_token_to_cache(self, token_info) -> None: ...

class CacheFileHandler(CacheHandler):
    encoder_cls: Incomplete
    cache_path: Incomplete
    def __init__(self, cache_path: Incomplete | None = None, username: Incomplete | None = None, encoder_cls: Incomplete | None = None) -> None: ...
    def get_cached_token(self): ...
    def save_token_to_cache(self, token_info) -> None: ...

class MemoryCacheHandler(CacheHandler):
    token_info: Incomplete
    def __init__(self, token_info: Incomplete | None = None) -> None: ...
    def get_cached_token(self): ...
    def save_token_to_cache(self, token_info) -> None: ...

class DjangoSessionCacheHandler(CacheHandler):
    request: Incomplete
    def __init__(self, request) -> None: ...
    def get_cached_token(self): ...
    def save_token_to_cache(self, token_info) -> None: ...

class FlaskSessionCacheHandler(CacheHandler):
    session: Incomplete
    def __init__(self, session) -> None: ...
    def get_cached_token(self): ...
    def save_token_to_cache(self, token_info) -> None: ...

class RedisCacheHandler(CacheHandler):
    redis: Incomplete
    key: Incomplete
    def __init__(self, redis, key: Incomplete | None = None) -> None: ...
    def get_cached_token(self): ...
    def save_token_to_cache(self, token_info) -> None: ...
